#[allow(unused_imports)]
pub mod pb {
    tonic::include_proto!("lib"); // lib (lib.rs) is the name where our generated proto is within
                                  // the OUR_DIR environemntal variable.  be aware that we must
                                  // export OUT_DIR with the path of our generated proto stubs
                                  // before this program can correctly compile
}

use futures::stream::Stream;
use std::pin::Pin;
use std::sync::Arc;

use tokio_stream::StreamExt;
use tonic::{Request, Response, Status};
use tracing::info;

use tokio::sync::broadcast::{channel, Sender};
use tokio::sync::mpsc::channel as mpsc_channel;

use internal_objects::Quote;
use tokio_stream::wrappers::ReceiverStream;

use pb::{QuoterRequest, QuoterResponse};

use crate::pb::quoter_server::QuoterServer;

use tonic::transport::Server;

use std::{error::Error, net::ToSocketAddrs, path::PathBuf, thread};

type QuoterResult<T> = Result<Response<T>, Status>;
type ResponseStream = Pin<Box<dyn Stream<Item = Result<QuoterResponse, Status>> + Send>>;

#[derive(Debug, Clone)]
pub struct OrderBookQuoterServer {
    pub quote_producer: Arc<Sender<Quote>>,
}

impl OrderBookQuoterServer {
    pub fn new() -> (Self, Sender<Quote>) {
        let (quote_producer, _quote_consumer) = channel::<Quote>(16);
        let quote_producer_arc = Arc::new(quote_producer.clone());
        (
            OrderBookQuoterServer {
                quote_producer: quote_producer_arc,
            },
            quote_producer,
        )
    }
}

// NOTE:
//
// the autogenerated quoter trait containing the server_streaming_quoter implementation
// implemented at L64
/*
pub trait Quoter: Send + Sync + 'static {
        /// Server streaming response type for the ServerStreamingQuoter method.
        type ServerStreamingQuoterStream: futures_core::Stream<
                Item = std::result::Result<super::QuoterResponse, tonic::Status>,
            >
            + Send
            + 'static;
        async fn server_streaming_quoter(
            &self,
            request: tonic::Request<super::QuoterRequest>,
        ) -> std::result::Result<
            tonic::Response<Self::ServerStreamingQuoterStream>,
            tonic::Status,
        >;
    }
*/

#[tonic::async_trait]
impl pb::quoter_server::Quoter for OrderBookQuoterServer {
    type ServerStreamingQuoterStream = ResponseStream;

    async fn server_streaming_quoter(
        &self,
        req: Request<QuoterRequest>,
    ) -> QuoterResult<Self::ServerStreamingQuoterStream> {
        println!("\tclient connected from: {:?}", req.remote_addr());
        let producer = self.quote_producer.clone();
        let receiver = producer.subscribe();
        let output_stream = tokio_stream::wrappers::BroadcastStream::new(receiver);
        let mut quote_grpc_stream =
            output_stream.map(|upstream_quote_result| match upstream_quote_result {
                Ok(upstream_quote) => Ok(QuoterResponse {
                    ask_deals: upstream_quote
                        .ask_deals
                        .into_iter()
                        .map(|preprocessed_deal| pb::Deal {
                            location: preprocessed_deal.l as i32,
                            price: preprocessed_deal.p,
                            quantity: preprocessed_deal.q,
                        })
                        .collect(),
                    bid_deals: upstream_quote
                        .bid_deals
                        .into_iter()
                        .map(|preprocessed_deal| pb::Deal {
                            location: preprocessed_deal.l as i32,
                            price: preprocessed_deal.p,
                            quantity: preprocessed_deal.q,
                        })
                        .collect(),
                    spread: upstream_quote.spread as i32,
                }),
                Err(upstream_quote_error) => {
                    info!("failed");
                    return Err(upstream_quote_error);
                }
            });
        // 1. receive quote from upstream componenets through quote_grpc_stream
        // 2. forward quote to the client
        // 3. receive a quoter response and status back from the client
        let (client_response_producer, client_response_consumer) = mpsc_channel(1000);
        tokio::spawn(async move {
            while let Some(broadcast_receiver_result) = quote_grpc_stream.next().await {
                match broadcast_receiver_result {
                    Ok(quote) => {
                        match client_response_producer
                            .send(Result::<_, Status>::Ok(quote))
                            .await
                        {
                            Ok(_) => {
                                info!("sending quote to client");
                            }
                            Err(_quote) => break,
                        }
                    }
                    Err(_) => continue,
                }
            }
            println!("\tclient disconnected");
        });
        let output_stream = ReceiverStream::new(client_response_consumer);
        Ok(Response::new(
            Box::pin(output_stream) as Self::ServerStreamingQuoterStream
        ))
    }
}
